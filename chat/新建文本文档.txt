<!DOCTYPE html>
<html>
  <head>
    <title>Socket.IO chat</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #input:focus { outline: none; }
      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
      #messages > li:nth-child(odd) { background: #efefef; }
    </style>
  </head>
  <body>
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" /><button>Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>

      var socket = io();

      var form = document.getElementById('form');
      var input = document.getElementById('input');

      form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
          socket.emit('chat message', input.value);
          input.value = '';
        }
      });

      socket.on('chat message', function(msg) {
        var item = document.createElement('li');
        item.textContent = msg;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

    </script>  
  </body>

</html>

/////////////////////////////////////////////////////////////////////////////


<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>WebRTC Example</title>
  </head>
  <body>
    <h1>WebRTC Example</h1>
    <div>
      <label for="room-input">Room:</label>
      <input type="text" id="room-input">
      <button id="join-button">Join</button>
      <button id="start-button">Start</button>
    </div>
    <div>
      <h2>Local Video</h2>
      <video id="local-video" autoplay></video>
    </div>
    <div>
      <h2>Remote Video</h2>
      <video id="remote-video" autoplay></video>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const roomInput = document.getElementById('room-input');
      const joinButton = document.getElementById('join-button');
      const startButton = document.getElementById('start-button');
      const localVideo = document.getElementById('local-video');
      const remoteVideo = document.getElementById('remote-video');
      let localStream;
      let remoteStream;
      let room = '';

      joinButton.addEventListener('click', () => {
        room = roomInput.value;
        console.log('btn clicked...');
        console.log('send root number...')
        socket.emit('join', room);
        /*
        // 获取本地媒体流对象，并告知对方 offer。
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
          .then(stream => {
            localStream = stream;
            localVideo.srcObject = stream;
            console.log('send offer...');
            socket.emit('offer', room, createOffer(stream));
          })
          .catch(error => {
            console.error(error);
          });
          */
      });

      startButton.addEventListener('click', () => {
        // 获取本地媒体流对象，并告知对方 offer。
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
          .then(stream => {
            localStream = stream;
            localVideo.srcObject = stream;
            console.log('send offer...');
            socket.emit('offer', room, createOffer(stream));
          })
          .catch(error => {
            console.error(error);
          });
      });

      // 接收到对方的媒体信息，并发送应答 answer
      socket.on('offer', offer => {
        console.log('recv offer...');
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
          .then(stream => {
            remoteStream = stream;
            remoteVideo.srcObject = stream;
            const peerConnection = createPeerConnection(stream);
            peerConnection.setRemoteDescription(offer);
            peerConnection.createAnswer()
              .then(answer => {
                peerConnection.setLocalDescription(answer);
                console.log('send answer...');
                socket.emit('answer', roomInput.value, answer);
              })
              .catch(error => {
                console.error(error);
              });
          })
          .catch(error => {
            console.error(error);
          });
      });

      // 接收到对方发来的回应 answer
      socket.on('answer', answer => {
        console.log('recv answer...');
        peerConnection.setRemoteDescription(answer);
      });

      socket.on('ice-candidate', candidate => {
        console.log('recv ice-candidater...');
        peerConnection.addIceCandidate(candidate);
      });

      // 向对方发送本地媒体信息 offer
      function createOffer(stream) {
        const peerConnection = createPeerConnection(stream);
        peerConnection.createOffer()
          .then(offer => {
            peerConnection.setLocalDescription(offer);
            console.log('send offer');
            socket.emit('offer', roomInput.value, offer);
          })
          .catch(error => {
            console.error(error);
          });
      }

      // 创建点对点连接
      function createPeerConnection(stream) {
        const peerConnection = new RTCPeerConnection({
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },
            { urls: 'turn:global.turn.twilio.com:3478?transport=udp',
              username: 'your-username',
              credential: 'your-password' },
            { urls: 'turn:global.turn.twilio.com:3478?transport=tcp',
              username: 'your-username',
              credential: 'your-password' }
          ]
        });
        stream.getTracks().forEach(track => {
          peerConnection.addTrack(track, stream);
        });
        peerConnection.onicecandidate = event => {
          if (event.candidate) {
            console.log('send ice-candidate...');
            socket.emit('ice-candidate', roomInput.value, event.candidate);
          }
        };
        return peerConnection;
      }
    </script>
  </body>
</html>